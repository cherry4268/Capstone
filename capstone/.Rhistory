library(forecast)
library(tseries)
library(ggplot2)
library(scales)
# Upload the data
food <- read.csv("Capstone/data/Grocery/food_2019-2022.csv")
# examine data struce
str(food)
summary(food)
# Plot cost per meal by year across states
ggplot(food, aes(x = Year, y = "Cost Per Meal", color = "State")) +
geom_line() +
labs(title = "Cost Per Meal Over Time by State",
x = "Year",
y = "Cost Per Meal ($)") +
theme_minimal() +
theme(legend.position = "none")
# Box plot to identify outliers
ggplot(food, aes(x = as.factor(Year), y = "Cost Per Meal")) +
geom_boxplot() +
labs(title = "Distribution of Cost Per meal",
x = "Year",
y = "Cost Per Meal ($)") +
theme_minimal()
# Required libraries
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(ggplot2)
library(scales)
# Upload the data
food <- read.csv("Capstone/data/Grocery/food_2019-2022.csv")
# examine data structure
str(food)
summary(food)
# Split the column into County and State using separate()
food <- food %>%
separate(FIPS_State_County,
into = c("County", "State"),
sep = ", ",
remove = FALSE)  # keep original column
# Required libraries
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(ggplot2)
library(scales)
# Upload the data
food <- read.csv("Capstone/data/Grocery/food_2019-2022.csv")
# examine data structure
str(food)
summary(food)
# Split the column into County and State using separate()
food <- food %>%
separate(County..State,
into = c("County", "State"),
sep = ", ",
remove = FALSE)  # keep original column
# Check the result
head(food_data[, c("FIPS_State_County", "County", "State")])
# Required libraries
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(ggplot2)
library(scales)
# Upload the data
food <- read.csv("Capstone/data/Grocery/food_2019-2022.csv")
# examine data structure
str(food)
summary(food)
# Split the column into County and State using separate()
food <- food %>%
separate(County..State,
into = c("County", "State"),
sep = ", ",
remove = FALSE)  # keep original column
# Check the result
head(food[, c("County..State", "County", "State")])
# Required libraries
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(ggplot2)
library(scales)
# Upload the data
food <- read.csv("Capstone/data/Grocery/food_2019-2022.csv")
# examine data structure
str(food)
summary(food)
# Split the column into County and State using separate()
food <- food %>%
separate(County..State,
into = c("County", "State"),
sep = ", ",
remove = FALSE)  # keep original column
# Check the result
head(food[, c("County..State", "County", "State")])
# Plot cost per meal by year across states
ggplot(food, aes(x = Year, y = Cost.Per.Meal, color = State)) +
geom_line() +
labs(title = "Cost Per Meal Over Time by State",
x = "Year",
y = "Cost Per Meal ($)") +
theme_minimal() +
theme(legend.position = "none")
# Box plot to identify outliers
ggplot(food, aes(x = as.factor(Year), y = Cost.Per.Meal)) +
geom_boxplot() +
labs(title = "Distribution of Cost Per meal",
x = "Year",
y = "Cost Per Meal ($)") +
theme_minimal()
# Required libraries
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(ggplot2)
library(scales)
# Upload the data
food <- read.csv("Capstone/data/Grocery/food_2019-2022.csv")
# examine data structure
str(food)
summary(food)
# Split the column into County and State using separate()
food <- food %>%
separate(County..State,
into = c("County", "State"),
sep = ", ",
remove = FALSE)  # keep original column
# Check the result
head(food[, c("County..State", "County", "State")])
# Plot cost per meal by year across states
ggplot(food, aes(x = Year, y = Cost.Per.Meal, color = State)) +
geom_line() +
labs(title = "Cost Per Meal Over Time by State",
x = "Year",
y = "Cost Per Meal ($)") +
scale_y_continuous(
breaks = seq(0, max(food_data$Cost_Per_Meal, na.rm = TRUE) + 5, by = 5),
labels = scales::dollar_format()
) +
theme_minimal() +
theme(legend.position = "none")
# Required libraries
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(ggplot2)
library(scales)
# Upload the data
food <- read.csv("Capstone/data/Grocery/food_2019-2022.csv")
# examine data structure
str(food)
summary(food)
# Split the column into County and State using separate()
food <- food %>%
separate(County..State,
into = c("County", "State"),
sep = ", ",
remove = FALSE)  # keep original column
# Check the result
head(food[, c("County..State", "County", "State")])
# Plot cost per meal by year across states
ggplot(food, aes(x = Year, y = Cost.Per.Meal, color = State)) +
geom_line() +
labs(title = "Cost Per Meal Over Time by State",
x = "Year",
y = "Cost Per Meal ($)") +
scale_y_continuous(
breaks = seq(0, max(food$Cost_Per_Meal, na.rm = TRUE) + 5, by = 5),
labels = scales::dollar_format()
) +
theme_minimal() +
theme(legend.position = "none")
# Required libraries
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(ggplot2)
library(scales)
# Upload the data
food <- read.csv("Capstone/data/Grocery/food_2019-2022.csv")
# examine data structure
str(food)
summary(food)
# Split the column into County and State using separate()
food <- food %>%
separate(County..State,
into = c("County", "State"),
sep = ", ",
remove = FALSE)  # keep original column
# Check the result
head(food[, c("County..State", "County", "State")])
# Plot cost per meal by year across states
ggplot(food, aes(x = Year, y = Cost.Per.Meal, color = State)) +
geom_line() +
labs(title = "Cost Per Meal Over Time by State",
x = "Year",
y = "Cost Per Meal ($)") +
scale_y_continuous(
breaks = seq(0, max(food$Cost.Per.Meal, na.rm = TRUE) + 5, by = 5),
labels = scales::dollar_format()
) +
theme_minimal() +
theme(legend.position = "none")
# Libraries
library(shiny)
# Libraries
library(shiny)
install.packages("shiny")
library(shiny)
# Libraries
library(shiny)
library(maps)
install.packages('maps')
library(maps)
# Libraries
library(shiny)
library(maps)
library(mapproj)
install.packages('mapproj')
library(mapproj)
# Libraries
library(shiny)
library(maps)
library(mapproj)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Libraries
library(shiny)
library(maps)
library(mapproj)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Get US states map data
us_states <- map_data("state")
# random data (temporary)
state_data <- data.frame(
state = unique(us_states$region),
value = runif(length(unique(us_states$region)), 5, 15)
)
# Define UI
ui <- fluidPage(
titlePanel("U.S. States Map"),
sidebarLayout(
sidebarPanel(
selectInput("colorScheme", "Color Scheme:",
choices = c("Blues", "Reds", "Greens", "Purples", "Oranges"),
selected = "Blues"),
selectInput("variable", "Variable to Display:",
choices = c("Cost Per Meal" = "Value"),
selected = "value"),
sliderInput("year", "Year:",
min = 2010, max = 2024, value = 2024, step = 1)
),
mainPanel(
plotOutput("stateMap", height = "600px"),
br(),
dataTableOutput("stateData")
)
)
)
# Define Server
server <- function(input, output) {
# reactive data filtering
filtered_data <- reactive({
# fake data
state_data
})
# generate the map
output$stateMap <- renderPlot({
# join map data with metrics
map_data <- us_states %>%
left_join(filtered_data(), by = c("region" = "state"))
# create the map
ggplot(map_data, aes(x = long, y = lat, group = group, fill = value)) +
geom_polygon(color = "white", size = 0.2) +
coord_map("albers", lat0 = 39, lat1 = 45) +
scale_fill_distiller(
palette = input$colorScheme,
direction = 1,
name = ifelse(input$variable == "value", "Cost Per Meal ($)", input$variable),
breaks = seq(5, 15, b = 5),
labels = scales::dollar_format()
) +
labs(
title = paste("Food Insecurity Data by State -", input$year),
caption = "Source: data"
)+
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = elemtn_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16)
)
})
# Display data table
output$stateData <- renderDataTable({
filtered_data() %>%
arrange(desc(value)) %>%
mutate(
state = tools::toTitleCase(state),
value = scales::dollar(value)
) %>%
rename(
State = state,
'Cost Per Meal' = value
)
})
}
# run app
shinyApp(ui = ui, server = server)
# Libraries
library(shiny)
library(maps)
library(mapproj)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Get US states map data
us_states <- map_data("state")
# random data (temporary)
state_data <- data.frame(
state = unique(us_states$region),
value = runif(length(unique(us_states$region)), 5, 15)
)
# Define UI
ui <- fluidPage(
titlePanel("U.S. States Map"),
sidebarLayout(
sidebarPanel(
selectInput("colorScheme", "Color Scheme:",
choices = c("Blues", "Reds", "Greens", "Purples", "Oranges"),
selected = "Blues"),
selectInput("variable", "Variable to Display:",
choices = c("Cost Per Meal" = "Value"),
selected = "value"),
sliderInput("year", "Year:",
min = 2010, max = 2024, value = 2024, step = 1)
),
mainPanel(
plotOutput("stateMap", height = "600px"),
br(),
dataTableOutput("stateData")
)
)
)
# Define Server
server <- function(input, output) {
# reactive data filtering
filtered_data <- reactive({
# fake data
state_data
})
# generate the map
output$stateMap <- renderPlot({
# join map data with metrics
map_data <- us_states %>%
left_join(filtered_data(), by = c("region" = "state"))
# create the map
ggplot(map_data, aes(x = long, y = lat, group = group, fill = value)) +
geom_polygon(color = "white", size = 0.2) +
coord_map("albers", lat0 = 39, lat1 = 45) +
scale_fill_distiller(
palette = input$colorScheme,
direction = 1,
name = ifelse(input$variable == "value", "Cost Per Meal ($)", input$variable),
breaks = seq(5, 15, b = 5),
labels = scales::dollar_format()
) +
labs(
title = paste("Food Insecurity Data by State -", input$year),
caption = "Source: data"
)+
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16)
)
})
# Display data table
output$stateData <- renderDataTable({
filtered_data() %>%
arrange(desc(value)) %>%
mutate(
state = tools::toTitleCase(state),
value = scales::dollar(value)
) %>%
rename(
State = state,
'Cost Per Meal' = value
)
})
}
# run app
shinyApp(ui = ui, server = server)
install.packages('plotly')
# Libraries
library(shiny)
library(maps)
library(mapproj)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(plotly)
# Libraries
library(shiny)
library(maps)
library(mapproj)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(plotly)
# Get US states map data
us_states <- map_data("state")
# random data (temporary)
state_data <- data.frame(
state = unique(us_states$region),
value = runif(length(unique(us_states$region)), 5, 15)
)
# Define UI
ui <- fluidPage(
titlePanel("U.S. States Map"),
sidebarLayout(
sidebarPanel(
selectInput("colorScheme", "Color Scheme:",
choices = c("Blues", "Reds", "Greens", "Purples", "Oranges"),
selected = "Blues"),
selectInput("variable", "Variable to Display:",
choices = c("Cost Per Meal" = "Value"),
selected = "value"),
sliderInput("year", "Year:",
min = 2010, max = 2024, value = 2024, step = 1)
),
mainPanel(
plotOutput("stateMap", height = "600px"),
br(),
dataTableOutput("stateData")
)
)
)
# Define Server
server <- function(input, output) {
# reactive data filtering
filtered_data <- reactive({
# fake data
state_data
})
# generate the map
output$stateMap <- renderPlot({
# join map data with metrics
map_data <- us_states %>%
left_join(filtered_data(), by = c("region" = "state"))
# create the map
ggplot(map_data, aes(x = long, y = lat, group = group, fill = value)) +
geom_polygon(color = "white", size = 0.2) +
coord_map("albers", lat0 = 39, lat1 = 45) +
scale_fill_distiller(
palette = input$colorScheme,
direction = 1,
name = ifelse(input$variable == "value", "Cost Per Meal ($)", input$variable),
breaks = seq(5, 15, b = 5),
labels = scales::dollar_format()
) +
labs(
title = paste("Food Insecurity Data by State -", input$year),
caption = "Source: data"
)+
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16)
)
})
# Display data table
output$stateData <- renderDataTable({
filtered_data() %>%
arrange(desc(value)) %>%
mutate(
state = tools::toTitleCase(state),
value = scales::dollar(value)
) %>%
rename(
State = state,
'Cost Per Meal' = value
)
})
}
# run app
shinyApp(ui = ui, server = server)
install.packages("plotly")
library(shiny); runApp('Capstone/capstone/shiny_map.R')
runApp('Capstone/capstone/shiny_map.R')
runApp('Capstone/capstone/shiny_map.R')
