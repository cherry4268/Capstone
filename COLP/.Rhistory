setDT(last_rPCE)
predictor_forecasts[Year == 2023, rPCE_lag1 := last_rPCE[.SD, on = "State", rPCE_lag1]]
b <- as.list(coefs)
# Ensure data.table format
setDT(predictor_forecasts)
# Clear log_rPCE
predictor_forecasts[, log_rPCE := NA_real_]
# Convert lag to numeric just in case
predictor_forecasts[, rPCE_lag1 := as.numeric(rPCE_lag1)]
# Get forecast years
future_years <- sort(unique(predictor_forecasts[Year > 2022, Year]))
# 1. Extract the fixed effects for each state
fixed_effects <- fixef(pardl_model)
fe_dt <- data.table(State = names(fixed_effects), fe = as.numeric(fixed_effects))
# join fixed effects to predictor_forecasts
predictor_forecasts <- merge(predictor_forecasts, fe_dt, by = "State")
# 2. Modify your recursive forecasting loop
for (i in seq_along(future_years)) {
this_year <- future_years[i]
next_year <- if (i < length(future_years)) future_years[i + 1] else NA
# Get row indices
idx <- predictor_forecasts[Year == this_year, which = TRUE]
# Forecast log_rPCE (with fixed effects)
predictor_forecasts[idx, log_rPCE :=
fe +  # Add the state-specific fixed effect
b$rPCE_lag1        * rPCE_lag1 +
b$electricity      * electricity_forecast +
b$electricity_lag1 * electricity_lag1 +
b$food             * food_forecast +
b$food_lag1        * food_lag1 +
b$auto             * auto_forecast +
b$auto_lag1        * auto_lag1 +
b$ng               * ng_forecast +
b$ng_lag1          * ng_lag1 +
b$house_own        * house_own_forecast +
b$house_own_lag1   * house_own_lag1
]
# Propagate rPCE_lag1 for next year
if (!is.na(next_year)) {
forecasted_lag <- predictor_forecasts[Year == this_year, .(State, new_lag = log_rPCE)]
predictor_forecasts[Year == next_year,
rPCE_lag1 := forecasted_lag[.SD, on = "State", new_lag]]
}
}
setorder(predictor_forecasts, State, Year)
print(names(predictor_forecasts))
print(names(b))
debug_year <- future_years[1]
debug_data <- predictor_forecasts[Year == debug_year]
print(paste("Number of rows for year", debug_year, ":", nrow(debug_data)))
print(head(debug_data))
for (i in seq_along(future_years)) {
this_year <- future_years[i]
next_year <- if (i < length(future_years)) future_years[i + 1] else NA
print(this_year)
print(sum(predictor_forecasts$Year == this_year))
# Get row indices
idx <- predictor_forecasts[Year == this_year, which = TRUE]
# Forecast log_rPCE (with fixed effects)
predictor_forecasts[idx, log_rPCE :=
fe +  # Add the state-specific fixed effect
b$rPCE_lag1        * rPCE_lag1 +
b$electricity      * electricity_forecast +
b$electricity_lag1 * electricity_lag1 +
b$food             * food_forecast +
b$food_lag1        * food_lag1 +
b$auto             * auto_forecast +
b$auto_lag1        * auto_lag1 +
b$ng               * ng_forecast +
b$ng_lag1          * ng_lag1 +
b$house_own        * house_own_forecast +
b$house_own_lag1   * house_own_lag1
]
# Propagate rPCE_lag1 for next year
if (!is.na(next_year)) {
forecasted_lag <- predictor_forecasts[Year == this_year, .(State, new_lag = log_rPCE)]
predictor_forecasts[Year == next_year,
rPCE_lag1 := forecasted_lag[.SD, on = "State", new_lag]]
}
}
for (i in seq_along(future_years)) {
this_year <- future_years[i]
next_year <- if (i < length(future_years)) future_years[i + 1] else NA
print(this_year)
print(sum(predictor_forecasts$Year == this_year))
# Get row indices
idx <- predictor_forecasts[Year == this_year, which = TRUE]
# Forecast log_rPCE (with fixed effects)
predictor_forecasts[idx, log_rPCE :=
.SD$fe +  # Add the state-specific fixed effect
b$rPCE_lag1        * rPCE_lag1 +
b$electricity      * electricity_forecast +
b$electricity_lag1 * electricity_lag1 +
b$food             * food_forecast +
b$food_lag1        * food_lag1 +
b$auto             * auto_forecast +
b$auto_lag1        * auto_lag1 +
b$ng               * ng_forecast +
b$ng_lag1          * ng_lag1 +
b$house_own        * house_own_forecast +
b$house_own_lag1   * house_own_lag1
]
# Propagate rPCE_lag1 for next year
if (!is.na(next_year)) {
forecasted_lag <- predictor_forecasts[Year == this_year, .(State, new_lag = log_rPCE)]
predictor_forecasts[Year == next_year,
rPCE_lag1 := forecasted_lag[.SD, on = "State", new_lag]]
}
}
# Clear log_rPCE
predictor_forecasts[, log_rPCE := NA_real_]
# Convert lag to numeric just in case
predictor_forecasts[, rPCE_lag1 := as.numeric(rPCE_lag1)]
# Get forecast years
future_years <- sort(unique(predictor_forecasts[Year > 2022, Year]))
# 1. Extract the fixed effects for each state
fixed_effects <- fixef(pardl_model)
# 2. Modify your recursive forecasting loop
for (i in seq_along(future_years)) {
this_year <- future_years[i]
next_year <- if (i < length(future_years)) future_years[i + 1] else NA
print(this_year)
print(sum(predictor_forecasts$Year == this_year))
# Get row indices
idx <- predictor_forecasts[Year == this_year, which = TRUE]
# Forecast log_rPCE (with fixed effects)
predictor_forecasts[idx, log_rPCE :=
fixed_effects[State] +  # Add the state-specific fixed effect
b$rPCE_lag1        * rPCE_lag1 +
b$electricity      * electricity_forecast +
b$electricity_lag1 * electricity_lag1 +
b$food             * food_forecast +
b$food_lag1        * food_lag1 +
b$auto             * auto_forecast +
b$auto_lag1        * auto_lag1 +
b$ng               * ng_forecast +
b$ng_lag1          * ng_lag1 +
b$house_own        * house_own_forecast +
b$house_own_lag1   * house_own_lag1
]
# Propagate rPCE_lag1 for next year
if (!is.na(next_year)) {
forecasted_lag <- predictor_forecasts[Year == this_year, .(State, new_lag = log_rPCE)]
predictor_forecasts[Year == next_year,
rPCE_lag1 := forecasted_lag[.SD, on = "State", new_lag]]
}
}
# packages
library(dplyr)
library(tidyr)
library(forecast)
library(purrr)
library(ggplot2)
library(plm)
# upload panel data
pdata <- read.csv("Capstone/capstone/panel_data.csv", check.names = FALSE)
# log the values
pdata <- pdata %>%
mutate(across(c(rPCE, electricity, food, auto, ng, house_own), log)) %>%
pdata.frame(index = c("State", "Year"))
######### Step 1: Forecast each predictor by state using ARIMA
# forecast horizon
h <- 5
library(forecast)
library(purrr)
library(tidyr)
forecast_by_state <- function(data, var) {
data %>%
mutate(Year = as.numeric(as.character(Year))) %>%
select(State, Year, !!sym(var)) %>%
group_by(State) %>%
arrange(Year) %>%
nest() %>%
mutate(
model = purrr::map(data, ~ auto.arima(ts(.x[[var]], start = min(.x$Year)))),
forecast = purrr::map(model, ~ forecast(.x, h = 5)),
pred_years = purrr::map(data, ~ seq(max(.x$Year) + 1, length.out = 5))
) %>%
mutate(
forecast_df = purrr::map2(pred_years, forecast, function(years, f) {
tibble(
Year = years,
!!paste0(var, "_forecast") := as.numeric(f$mean)
)
})
) %>%
unnest(forecast_df) %>%
dplyr::select(State, Year, matches("(_forecast|_lag1)$"))
}
# Forecast each predictor
electricity_f <- forecast_by_state(pdata, "electricity")
food_f        <- forecast_by_state(pdata, "food")
auto_f        <- forecast_by_state(pdata, "auto")
ng_f          <- forecast_by_state(pdata, "ng")
house_own_f   <- forecast_by_state(pdata, "house_own")
# Combine forecasts
library(data.table)
predictor_forecasts <- reduce(list(electricity_f, food_f, auto_f, ng_f, house_own_f), full_join, by = c("State", "Year"))
setDT(predictor_forecasts)
######### Step 2: Merge Forecasts and Generate Lags
library(data.table)
# convert to data.table for lagging
setDT(predictor_forecasts)
setorder(predictor_forecasts, State, Year)
# Get the 2022 values (last year of real data) for each predictor
last_obs <- pdata %>%
filter(Year == 2022) %>%
dplyr::select(State, Year, electricity, food, auto, ng, house_own) %>%
rename_with(~ paste0(.x, "_forecast"), -c(State, Year))
# Ensure Year is numeric in both datasets
last_obs$Year <- as.integer(as.character(last_obs$Year))
predictor_forecasts$Year <- as.integer(predictor_forecasts$Year)
# Combine 2022 obs with forecasted 2023â€“2027
predictor_forecasts <- bind_rows(last_obs, predictor_forecasts) %>%
arrange(State, Year) %>%
as.data.table()
# Create lagged predictors by state
vars <- c("electricity", "food", "auto", "ng", "house_own")
for (v in vars) {
predictor_forecasts[, paste0(v, "_lag1") := shift(get(paste0(v, "_forecast")), 1), by = State]
}
setDT(predictor_forecasts)
######### Step 3: recursive rPCE forecasting via Panel ARDL
#### Panel ARDL Model
# recreate lags
pdata <- pdata %>%
group_by(State) %>%
arrange(Year) %>%
mutate(
rPCE_lag1 = lag(rPCE),
electricity_lag1 = lag(electricity),
food_lag1 = lag(food),
auto_lag1 = lag(auto),
ng_lag1 = lag(ng),
house_own_lag1 = lag(house_own)
) %>%
ungroup()
# panel ARDL
pardl_model <- plm(
rPCE ~ rPCE_lag1 + electricity + electricity_lag1 +
food + food_lag1 + auto + auto_lag1 +
ng + ng_lag1 + house_own + house_own_lag1,
data = pdata,
model = "within",
effect = "individual",
index = c("State", "Year")
)
summary(pardl_model)
## extract coeffs and compute long run effects
coefs <- coef(pardl_model)
# pull autoregressive term (phi)
phi <- coefs["rPCE_lag1"]
# long run effects
long_run <- list(
electricity = (coefs["electricity"] + coefs["electricity_lag1"]) / (1 - phi),
food        = (coefs["food"] + coefs["food_lag1"]) / (1 - phi),
auto        = (coefs["auto"] + coefs["auto_lag1"]) / (1 - phi),
ng          = (coefs["ng"] + coefs["ng_lag1"]) / (1 - phi),
house_own   = (coefs["house_own"] + coefs["house_own_lag1"]) / (1 - phi)
)
long_run
##### Recursive Forecasting
# Get rPCE_lag1 from 2022 and merge into predictor_forecasts for 2023
last_rPCE <- pdata %>%
filter(Year == 2022) %>%
select(State, rPCE) %>%
rename(rPCE_lag1 = rPCE)
setDT(last_rPCE)
predictor_forecasts[Year == 2023, rPCE_lag1 := last_rPCE[.SD, on = "State", rPCE_lag1]]
b <- as.list(coefs)
# Ensure data.table format
setDT(predictor_forecasts)
# Clear log_rPCE
predictor_forecasts[, log_rPCE := NA_real_]
# Convert lag to numeric just in case
predictor_forecasts[, rPCE_lag1 := as.numeric(rPCE_lag1)]
# Get forecast years
future_years <- sort(unique(predictor_forecasts[Year > 2022, Year]))
# 1. Extract the fixed effects for each state
fixed_effects <- fixef(pardl_model)
# 2. Modify your recursive forecasting loop
for (i in seq_along(future_years)) {
this_year <- future_years[i]
next_year <- if (i < length(future_years)) future_years[i + 1] else NA
print(this_year)
print(sum(predictor_forecasts$Year == this_year))
# Get row indices
idx <- predictor_forecasts[Year == this_year, which = TRUE]
if (length(idx) > 0 ) {
fe_values <- fixed_effects[predictor_forecasts[idx, State]]
}
# Forecast log_rPCE (with fixed effects)
predictor_forecasts[idx, log_rPCE :=
fe_values +
b$rPCE_lag1        * rPCE_lag1 +
b$electricity      * electricity_forecast +
b$electricity_lag1 * electricity_lag1 +
b$food             * food_forecast +
b$food_lag1        * food_lag1 +
b$auto             * auto_forecast +
b$auto_lag1        * auto_lag1 +
b$ng               * ng_forecast +
b$ng_lag1          * ng_lag1 +
b$house_own        * house_own_forecast +
b$house_own_lag1   * house_own_lag1
]
# Propagate rPCE_lag1 for next year
if (!is.na(next_year)) {
forecasted_lag <- predictor_forecasts[Year == this_year, .(State, new_lag = log_rPCE)]
predictor_forecasts[Year == next_year,
rPCE_lag1 := forecasted_lag[.SD, on = "State", new_lag]]
}
}
for (i in seq_along(future_years)) {
this_year <- future_years[i]
next_year <- if (i < length(future_years)) future_years[i + 1] else NA
print(this_year)
print(sum(predictor_forecasts$Year == this_year))
# Get row indices
idx <- predictor_forecasts[Year == this_year, which = TRUE]
if (length(idx) > 0) {
fe_values <- fixed_effects[predictor_forecasts[idx, State]]
predictor_forecasts[idx, log_rPCE :=
fe_values +
b$rPCE_lag1        * rPCE_lag1 +
b$electricity      * electricity_forecast +
b$electricity_lag1 * electricity_lag1 +
b$food             * food_forecast +
b$food_lag1        * food_lag1 +
b$auto             * auto_forecast +
b$auto_lag1        * auto_lag1 +
b$ng               * ng_forecast +
b$ng_lag1          * ng_lag1 +
b$house_own        * house_own_forecast +
b$house_own_lag1   * house_own_lag1
]
# Also propagate lag only if idx > 0
if (!is.na(next_year)) {
forecasted_lag <- predictor_forecasts[Year == this_year, .(State, new_lag = log_rPCE)]
predictor_forecasts[Year == next_year,
rPCE_lag1 := forecasted_lag[.SD, on = "State", new_lag]]
}
}
}
# packages
library(dplyr)
library(tidyr)
library(forecast)
library(purrr)
library(ggplot2)
library(plm)
# upload panel data
pdata <- read.csv("Capstone/capstone/panel_data.csv", check.names = FALSE)
# log the values
pdata <- pdata %>%
mutate(across(c(rPCE, electricity, food, auto, ng, house_own), log)) %>%
pdata.frame(index = c("State", "Year"))
######### Step 1: Forecast each predictor by state using ARIMA
# forecast horizon
h <- 5
library(forecast)
library(purrr)
library(tidyr)
forecast_by_state <- function(data, var) {
data %>%
mutate(Year = as.numeric(as.character(Year))) %>%
select(State, Year, !!sym(var)) %>%
group_by(State) %>%
arrange(Year) %>%
nest() %>%
mutate(
model = purrr::map(data, ~ auto.arima(ts(.x[[var]], start = min(.x$Year)))),
forecast = purrr::map(model, ~ forecast(.x, h = 5)),
pred_years = purrr::map(data, ~ seq(max(.x$Year) + 1, length.out = 5))
) %>%
mutate(
forecast_df = purrr::map2(pred_years, forecast, function(years, f) {
tibble(
Year = years,
!!paste0(var, "_forecast") := as.numeric(f$mean)
)
})
) %>%
unnest(forecast_df) %>%
dplyr::select(State, Year, matches("(_forecast|_lag1)$"))
}
# Forecast each predictor
electricity_f <- forecast_by_state(pdata, "electricity")
food_f        <- forecast_by_state(pdata, "food")
auto_f        <- forecast_by_state(pdata, "auto")
ng_f          <- forecast_by_state(pdata, "ng")
house_own_f   <- forecast_by_state(pdata, "house_own")
# Combine forecasts
library(data.table)
predictor_forecasts <- reduce(list(electricity_f, food_f, auto_f, ng_f, house_own_f), full_join, by = c("State", "Year"))
setDT(predictor_forecasts)
######### Step 2: Merge Forecasts and Generate Lags
library(data.table)
# convert to data.table for lagging
setDT(predictor_forecasts)
setorder(predictor_forecasts, State, Year)
# Get the 2022 values (last year of real data) for each predictor
last_obs <- pdata %>%
filter(Year == 2022) %>%
dplyr::select(State, Year, electricity, food, auto, ng, house_own) %>%
rename_with(~ paste0(.x, "_forecast"), -c(State, Year))
# Ensure Year is numeric in both datasets
last_obs$Year <- as.integer(as.character(last_obs$Year))
predictor_forecasts$Year <- as.integer(predictor_forecasts$Year)
# Combine 2022 obs with forecasted 2023â€“2027
predictor_forecasts <- bind_rows(last_obs, predictor_forecasts) %>%
arrange(State, Year) %>%
as.data.table()
# Create lagged predictors by state
vars <- c("electricity", "food", "auto", "ng", "house_own")
for (v in vars) {
predictor_forecasts[, paste0(v, "_lag1") := shift(get(paste0(v, "_forecast")), 1), by = State]
}
setDT(predictor_forecasts)
######### Step 3: recursive rPCE forecasting via Panel ARDL
#### Panel ARDL Model
# recreate lags
pdata <- pdata %>%
group_by(State) %>%
arrange(Year) %>%
mutate(
rPCE_lag1 = lag(rPCE),
electricity_lag1 = lag(electricity),
food_lag1 = lag(food),
auto_lag1 = lag(auto),
ng_lag1 = lag(ng),
house_own_lag1 = lag(house_own)
) %>%
ungroup()
# panel ARDL
pardl_model <- plm(
rPCE ~ rPCE_lag1 + electricity + electricity_lag1 +
food + food_lag1 + auto + auto_lag1 +
ng + ng_lag1 + house_own + house_own_lag1,
data = pdata,
model = "within",
effect = "individual",
index = c("State", "Year")
)
summary(pardl_model)
## extract coeffs and compute long run effects
coefs <- coef(pardl_model)
# pull autoregressive term (phi)
phi <- coefs["rPCE_lag1"]
# long run effects
long_run <- list(
electricity = (coefs["electricity"] + coefs["electricity_lag1"]) / (1 - phi),
food        = (coefs["food"] + coefs["food_lag1"]) / (1 - phi),
auto        = (coefs["auto"] + coefs["auto_lag1"]) / (1 - phi),
ng          = (coefs["ng"] + coefs["ng_lag1"]) / (1 - phi),
house_own   = (coefs["house_own"] + coefs["house_own_lag1"]) / (1 - phi)
)
long_run
##### Recursive Forecasting
# Get rPCE_lag1 from 2022 and merge into predictor_forecasts for 2023
last_rPCE <- pdata %>%
filter(Year == 2022) %>%
select(State, rPCE) %>%
rename(rPCE_lag1 = rPCE)
setDT(last_rPCE)
predictor_forecasts[Year == 2023, rPCE_lag1 := last_rPCE[.SD, on = "State", rPCE_lag1]]
b <- as.list(coefs)
# Ensure data.table format
setDT(predictor_forecasts)
# Clear log_rPCE
predictor_forecasts[, log_rPCE := NA_real_]
# Convert lag to numeric just in case
predictor_forecasts[, rPCE_lag1 := as.numeric(rPCE_lag1)]
# Get forecast years
future_years <- sort(unique(predictor_forecasts[Year > 2022, Year]))
# 1. Extract the fixed effects for each state
fixed_effects <- fixef(pardl_model)
fe_dt <- data.table(State = names(fixed_effects), fe = as.numeric(fixed_effects))
# join fixed effects to predictor_forecasts
predictor_forecasts <- merge(predictor_forecasts, fe_dt, by = "State")
# 2. Modify your recursive forecasting loop
for (i in seq_along(future_years)) {
this_year <- future_years[i]
next_year <- if (i < length(future_years)) future_years[i + 1] else NA
# Get row indices
idx <- predictor_forecasts[Year == this_year, which = TRUE]
# Forecast log_rPCE (with fixed effects)
predictor_forecasts[idx, log_rPCE :=
fixed_effects[State] +  # Add the state-specific fixed effect
b$rPCE_lag1        * rPCE_lag1 +
b$electricity      * electricity_forecast +
b$electricity_lag1 * electricity_lag1 +
b$food             * food_forecast +
b$food_lag1        * food_lag1 +
b$auto             * auto_forecast +
b$auto_lag1        * auto_lag1 +
b$ng               * ng_forecast +
b$ng_lag1          * ng_lag1 +
b$house_own        * house_own_forecast +
b$house_own_lag1   * house_own_lag1
]
# Propagate rPCE_lag1 for next year
if (!is.na(next_year)) {
forecasted_lag <- predictor_forecasts[Year == this_year, .(State, new_lag = log_rPCE)]
predictor_forecasts[Year == next_year,
rPCE_lag1 := forecasted_lag[.SD, on = "State", new_lag]]
}
}
shiny::runApp('Capstone/COLP')
install.packages("shinydashboard")
install.packages("shinydashboard")
shiny::runApp('Capstone/COLP')
